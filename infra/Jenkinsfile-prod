pipeline {
  // The agent 'prod' is your production EC2 or build node
  agent { label 'prod' }

  environment {
    DOCKERHUB_NAMESPACE   = "swe40006pj" 
    APP_NAME              = "unit-converter"
    DOCKERHUB_CREDENTIALS = 'docker-hub'
    PROD_TAG              = "prod"
  }

  stages {
    stage('Build Docker Image') {
      steps {
        script {
          def COMMIT_ID   = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
          def IMAGE_COMMIT = "docker.io/${DOCKERHUB_NAMESPACE}/${APP_NAME}:${COMMIT_ID}"
          def IMAGE_PROD   = "docker.io/${DOCKERHUB_NAMESPACE}/${APP_NAME}:${PROD_TAG}"

          sh """
            echo "=== Building image for main (${IMAGE_PROD}) ==="
            docker build -f app/Dockerfile -t ${IMAGE_COMMIT} .
            docker tag ${IMAGE_COMMIT} ${IMAGE_PROD}
          """
        }
      }
    }

    stage('Push to Docker Hub (:prod)') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          script {
            def COMMIT_ID   = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            def IMAGE_COMMIT = "docker.io/${DOCKERHUB_NAMESPACE}/${APP_NAME}:${COMMIT_ID}"
            def IMAGE_PROD   = "docker.io/${DOCKERHUB_NAMESPACE}/${APP_NAME}:${PROD_TAG}"

            sh """
              echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
              docker push ${IMAGE_COMMIT}
              docker push ${IMAGE_PROD}
              docker logout
            """
          }
        }
      }
    }

    stage('Deploy on Production EC2') {
      steps {
        script {
          def IMAGE_PROD = "docker.io/${DOCKERHUB_NAMESPACE}/${APP_NAME}:${PROD_TAG}"

          sh """
            echo "=== Deploying production container on EC2 ==="

            # Remove any existing container with same name
            if [ "$(docker ps -aq -f name=${APP_NAME}-prod)" ]; then
              echo "üßπ Removing existing container: ${APP_NAME}-prod"
              docker rm -f ${APP_NAME}-prod
            else
              echo "‚úÖ No existing container found, safe to deploy new one."
            fi

            # Pull latest image
            docker pull ${IMAGE_PROD}

            # Run new container
            docker run -d --name ${APP_NAME}-prod -p 5000:5000 ${IMAGE_PROD}
          """
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Production environment updated successfully!"
    }
    failure {
      echo "‚ùå Production build or deploy failed."
    }
  }
}
