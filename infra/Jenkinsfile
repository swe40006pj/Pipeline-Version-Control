pipeline {
  agent any

  stages {
    // This stage remains the same. It checks out the feature branch code.
    stage('Checkout Current Branch') {
      steps {
        checkout scm
      }
    }

    // STAGE REMOVED: The 'Fetch Tests from test Branch' stage has been deleted.
    // Its logic is now inside the Docker stage below.

    // This is now the main stage where everything happens inside the Docker container.
    stage('Setup, Compare, and Test (in Docker)') {
      agent {
        docker {
          image 'python:3.11-slim'
          args '-u root' // Run as root to install packages
        }
      }
      steps {
        script {
          sh '''
            set -e // Exit immediately if a command fails.

            echo "üêç Setting up environment in Docker container"
            apt-get update && apt-get install -y git
            git config --global --add safe.directory ${WORKSPACE}

            // ====================================================================
            // MOVED LOGIC: The test fetching logic is now here, inside Docker.
            // ====================================================================
            echo "=== Fetching tests from origin/test branch ==="
            git fetch origin test

            rm -rf tmp_test_branch
            mkdir tmp_test_branch

            # Export the test/ folder and config files from the test branch
            git archive FETCH_HEAD test | tar -x -C tmp_test_branch || echo "‚ö†Ô∏è test folder not found"
            git archive FETCH_HEAD test/pytest.ini test/conftest.py test/requirements.txt | tar -x -C tmp_test_branch || echo "‚ö†Ô∏è Some config files may not exist."

            # Copy the fetched files into the current workspace
            for f in test pytest.ini conftest.py requirements.txt; do
              if [ -e tmp_test_branch/$f ]; then
                echo "‚úÖ Updating $f from test branch"
                rm -rf $f
                mv tmp_test_branch/$f ./
              else
                echo "‚ö†Ô∏è $f not found in test branch"
              fi
            done
            
            echo "Listing fetched test directory:"
            ls -R test || echo "‚ö†Ô∏è test directory missing after fetch"
            // ====================================================================
            // End of moved logic.
            // ====================================================================

            echo "=== Installing ALL dependencies ==="
            # 1. Install testing dependencies
            if [ -f requirements.txt ]; then
              echo "üì¶ Installing test requirements..."
              pip install -r requirements.txt
            else
              pip install pytest
            fi

            # 2. Install application dependencies
            if [ -f app/requirements.txt ]; then
              echo "üì¶ Installing application requirements..."
              pip install -r app/requirements.txt
            fi

            echo "=== Comparing categories between develop and current branch ==="
            git fetch origin develop
            git show origin/develop:app/app.py > old_app.py

            # Extract categories from old and new app versions
            mv app/app.py current_app.py.bak
            mv old_app.py app/app.py
            old_cats=$(python3 extract_cats.py | sort)
            mv app/app.py old_app.py
            mv current_app.py.bak app/app.py
            new_cats=$(python3 extract_cats.py | sort)

            echo "Old categories: $old_cats"
            echo "New categories: $new_cats"

            added_cats=""
            for c in $new_cats; do
              if ! echo "$old_cats" | grep -qw "$c"; then
                added_cats="$added_cats $c"
              fi
            done
            
            # Trim leading space from added_cats
            added_cats=$(echo "$added_cats" | sed 's/^ *//g')

            if [ -z "$added_cats" ]; then
              echo "‚úÖ No new categories found. Skipping selective test run."
              exit 0
            fi

            echo "üß© New categories detected: $added_cats"

            missing_tests=0
            failed_tests=0
            for cat in $added_cats; do
              echo "‚ñ∂ Running tests for category: $cat"
              # This command should now find the 'test' directory
              pytest test -k "$cat" || {
                status=$?
                if [ $status -eq 5 ]; then
                  echo "‚ùå No test found for category '$cat'"
                  missing_tests=1
                else
                  echo "‚ùå Some tests failed for category '$cat'"
                  failed_tests=1
                fi
              }
            done

            if [ $missing_tests -eq 1 ]; then
              echo "‚ùå Missing tests for one or more categories."
              exit 1
            fi

            if [ $failed_tests -eq 1 ]; then
              echo "‚ùå One or more tests failed."
              exit 1
            fi

            echo "‚úÖ All new categories have tests and all passed!"
          '''
        }
      }
    }
  }

  post {
    success {
      echo 'PIPELINE ‚úÖ All category tests passed.'
    }
    failure {
      echo 'PIPELINE ‚ùå Some tests failed or missing.'
    }
  }
}