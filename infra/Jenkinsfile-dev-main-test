pipeline {
  agent { label 'staging' }

  stages {

    stage('Checkout Current Branch') {
      steps {
        checkout scm
      }
    }

    stage('Fetch Tests and Run Selective Category Tests (in Docker)') {
      agent {
        docker {
          image 'python:3.11-slim'
          args '-u root'
        }
      }

      steps {
        script {
          sh '''
set -e

echo "üêç Setting up Python environment in Docker container"
apt-get update && apt-get install -y git
git config --global --add safe.directory ${WORKSPACE}

# ===========================================================
# 1Ô∏è‚É£ ‰ªé test ÂàÜÊîØÊãâÂèñÊµãËØïÊñá‰ª∂
# ===========================================================
echo "=== Fetching tests from origin/test branch ==="
git fetch origin test

rm -rf tmp_test_branch
mkdir tmp_test_branch

git archive FETCH_HEAD test | tar -x -C tmp_test_branch || echo "‚ö†Ô∏è test folder not found"
git archive FETCH_HEAD test/pytest.ini test/conftest.py test/requirements.txt | tar -x -C tmp_test_branch || echo "‚ö†Ô∏è Some config files may not exist."

for f in test pytest.ini conftest.py requirements.txt; do
  if [ -e tmp_test_branch/$f ]; then
    echo "‚úÖ Updating $f from test branch"
    rm -rf $f
    mv tmp_test_branch/$f ./
  else
    echo "‚ö†Ô∏è $f not found in test branch"
  fi
done

echo "Listing fetched test directory:"
ls -R test || echo "‚ö†Ô∏è test directory missing after fetch"

# ===========================================================
# 2Ô∏è‚É£ ÂÆâË£Ö‰æùËµñÈ°π
# ===========================================================
echo "=== Installing ALL dependencies ==="
if [ -f requirements.txt ]; then
  pip install -r requirements.txt
else
  pip install pytest
fi

if [ -f app/requirements.txt ]; then
  echo "üì¶ Installing application dependencies (app/requirements.txt)..."
  pip install -r app/requirements.txt
fi

# ===========================================================
# 3Ô∏è‚É£ Âä®ÊÄÅÊèêÂèñ categories Âπ∂ËøêË°åÊµãËØï
# ===========================================================
echo "=== Extracting categories from app/app.py ==="
cd app
categories=$(python extract_cats.py)

if [ -z "$categories" ]; then
  echo "‚ùå No categories found from extract_cats.py, aborting."
  exit 1
fi

echo "=== Categories detected ==="
echo "$categories"
cd ..

cd test/tests
failed=0

for cat in $categories; do
  test_file="test_${cat}.py"
  if [ -f "$test_file" ]; then
    echo "‚úÖ Running test for $cat"
    pytest -q "$test_file" || failed=1
  else
    echo "‚ùå Missing test file: $test_file (category: $cat)"
    failed=1
  fi
done

if [ $failed -ne 0 ]; then
  echo "‚ùå Some categories are missing tests or failed"
  exit 1
else
  echo "‚úÖ All category tests passed successfully!"
fi
'''
        }
      }
    }
  }

  post {
    success {
      echo 'PIPELINE ‚úÖ All tests passed.'
      script {
        if (env.CHANGE_ID) {
          if (env.CHANGE_TARGET == 'develop') {
            echo "Tests passed for PR #${env.CHANGE_ID} targeting 'develop'. Attempting to auto-merge..."
            withCredentials([string(credentialsId: 'github-auto-merge-token', variable: 'GITHUB_TOKEN')]) {
              def GITHUB_OWNER = 'swe40006pj'
              def REPO_NAME = 'Pipeline-Version-Control'
              sh """
              curl -X PUT \
                   -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Accept: application/vnd.github.v3+json" \
                   "https://api.github.com/repos/${GITHUB_OWNER}/${REPO_NAME}/pulls/${env.CHANGE_ID}/merge" \
                   -d '{"merge_method": "squash", "commit_title": "Auto-merge PR #${env.CHANGE_ID} by Jenkins CI", "delete_branch": true}'
              """
              echo "‚úÖ Successfully requested auto-merge for PR #${env.CHANGE_ID}."
            }
          } else if (env.CHANGE_TARGET == 'main') {
            echo "Tests passed for PR #${env.CHANGE_ID} targeting 'main'."
            echo "Skipping auto-merge to allow for human review as required by branch protection."
          } else {
            echo "Tests passed for PR #${env.CHANGE_ID} targeting '${env.CHANGE_TARGET}'. Skipping auto-merge."
          }
        } else {
          echo "Not a PR build (CHANGE_ID is null), skipping auto-merge."
        }
      }
    }
    failure {
      echo 'PIPELINE ‚ùå Some tests failed. Please review test results.'
    }
  }
}