name: Feature ‚Üí Develop Category-based Tests

on:
  pull_request:
    branches: [ develop ]

jobs:
  detect-and-test:
    runs-on: ubuntu-latest
    name: Detect new categories and run targeted tests

    steps:
      # Step 1. Checkout feature branch
      - name: Checkout feature branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      # Step 2. Fetch develop branch
      - name: Fetch develop branch
        run: |
          git fetch origin develop

      # Step 3. Compare app.py and extract new categories
      - name: Detect new categories
        id: detect
        run: |
          echo "üîç Comparing app.py between develop and feature branch..."
          mkdir -p tmp
          # ‰øùÂ≠ò‰∏§‰∏™ÁâàÊú¨
          git show origin/develop:app.py > tmp/old_app.py || echo "" > tmp/old_app.py
          cp app.py tmp/new_app.py

          echo "Extracting categories from new app.py..."
          NEW=$(grep -oP 'CATEGORIES\["\K[^"]+' tmp/new_app.py | sort -u | tr 'A-Z' 'a-z')
          OLD=$(grep -oP 'CATEGORIES\["\K[^"]+' tmp/old_app.py | sort -u | tr 'A-Z' 'a-z')

          echo "OLD CATEGORIES: $OLD"
          echo "NEW CATEGORIES: $NEW"

          # ÊâæÂá∫Êñ∞Â¢ûÈÉ®ÂàÜÔºàÂá∫Áé∞Âú® NEW ËÄå‰∏çÂú® OLD ‰∏≠ÁöÑÔºâ
          NEW_CATEGORIES=$(comm -23 <(echo "$NEW") <(echo "$OLD"))

          if [ -z "$OLD" ]; then
            echo "üÜï Detected demo mode (no categories in develop)."
            NEW_CATEGORIES=$NEW
          fi

          if [ -z "$NEW_CATEGORIES" ]; then
            echo "‚úÖ No new categories found. Running full test suite instead."
            echo "new_categories=ALL" >> $GITHUB_OUTPUT
          else
            echo "üß© New categories detected: $NEW_CATEGORIES"
            echo "new_categories=$NEW_CATEGORIES" >> $GITHUB_OUTPUT
          fi

      # Step 4. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 5. Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "‚ö†Ô∏è No requirements.txt found, installing pytest and flask manually."
            pip install pytest flask
          fi

      # Step 6. Run pytest per new category
      - name: Run category-based tests
        run: |
          cd test
          FAILED=""
          UNTESTED=""

          if [ "${{ steps.detect.outputs.new_categories }}" = "ALL" ]; then
            echo "Running full test suite..."
            pytest -v --disable-warnings || exit 1
          else
            echo "Running category-based tests for:"
            echo "${{ steps.detect.outputs.new_categories }}"
            for cat in ${{ steps.detect.outputs.new_categories }}; do
              echo "üß™ Testing category: $cat"
              OUTPUT=$(pytest -k "$cat" -v --disable-warnings || true)
              echo "$OUTPUT"
              if echo "$OUTPUT" | grep -q "collected 0 items"; then
                echo "‚ùå No tests found for category: $cat"
                UNTESTED="$UNTESTED $cat"
              elif echo "$OUTPUT" | grep -q "FAILED"; then
                echo "‚ùå Some tests failed for category: $cat"
                FAILED="$FAILED $cat"
              else
                echo "‚úÖ Tests passed for category: $cat"
              fi
            done
          fi

          if [ -n "$UNTESTED" ]; then
            echo "::error::Missing tests for new categories:$UNTESTED"
            exit 1
          fi

          if [ -n "$FAILED" ]; then
            echo "::error::Test failures detected for categories:$FAILED"
            exit 1
          fi

          echo "‚úÖ All category tests passed successfully."

      # Step 7. Final summary
      - name: Report result
        if: success()
        run: echo "üéâ All required tests passed. Safe to merge into develop."